import java.util.*;
import java.io.*;
public class Main{
    static class Node{
        int val;
        int height;
        Node left;
        Node right;
        Node(int val){
            this.val = val;
            this.height = 1;
            this.left = null;
            this.right = null;
        }
    }
    static class AVLTree{
        Node root;
        
        int getBalance(Node node){
            if(node == null) return 0;
                return height(node.left) - height(node.right);
        }
        
        int height(Node node){
            if(node == null) return 0;
                return node.height;
        }
        
        Node leftrotate(Node x){
            Node y = x.right; 
            Node T2 = y.left; 
  
            y.left = x; 
            x.right = T2; 
  
            x.height = max(height(x.left), height(x.right)) + 1; 
            y.height = max(height(y.left), height(y.right)) + 1; 
  
            return y; 
        }
         Node rightRotate(Node y){ 
            Node x = y.left; 
            Node T2 = x.right; 
            
            x.right = y; 
            y.left = T2; 
   
            y.height = max(height(y.left), height(y.right)) + 1; 
            x.height = max(height(x.left), height(x.right)) + 1; 
 
            return x; 
        } 
        
        Node insert(Node node , int key){
            if(node == null){
                return new Node(key);
            }
            if(key < node.val){
                node.left = insert(node.left , key);
            }else if(key > node.val){
                node.right = insert(node.right , key);
            }else{
                return node;  
            }
            
            node.height = Math.max(height(node.left) , height(node.right)) + 1;
            
            int balance = getBalance(node);
            
            if(balance > 1 && key < node.left.val){
                return rightrotate(node);
            }
            
            if(balance < -1 && key > node.right.val){
                return leftrotate(node);
            }
            
            if(balance > 1 && key > node.left.val){
                node.left = leftrotate(node.left);
                return rightrotate(node);
            }
            
            if(balance < -1 && key < node.right.val){
                node.right = rightrotate(node.right);
                return leftrotate(node);
            }
            
            return node;
        }
        
        Node delete(Node node , int key){
            if(node == null) return null;
            
            if(key < node.val){
                node.left = delete(node.left , key);
            }else if(key > node.val){
                node.right = delete(node.right , key);
            }else{
                
                if(node.left != null && node.right != null){
                    Node minNode = min(node.left);
                    node.val = minNode.val;
                    node.right = delete(node.right , minNode.val);
                }else if ((node.left == null) || (node.right == null)) {
                    Node temp = null; 
                if (temp == node.left) 
                    temp = node.right; 
                else
                    temp = node.left; 
 
                if (temp == null){ 
                    temp = node;
                    node = null;
                } 
                else
                    node = temp;
               }
            }
            
            if(node == null) return node;
            
            node.height = Math.max(height(node.left) , height(node.right)) + 1;
            
            int balance = getBalance(node);
            
            if (balance > 1 && getBalance(node.left) >= 0) 
                return rightrotate(node); 
  
            if (balance > 1 && getBalance(node.left) < 0) { 
                node.left = leftrotate(node.left); 
                return rightrotate(node); 
            } 
  
            if (balance < -1 && getBalance(node.right) <= 0) 
                return leftrotate(node); 
  
            if (balance < -1 && getBalance(node.right) > 0){ 
                node.right = rightrotate(node.right); 
                return leftrotate(node); 
            } 
            
            return node;
        }
        Node min(Node node){
            Node current = node; 
            while (current.left != null) 
               current = current.left; 
  
            return current; 
        }        
        void preOrder(Node node){
            if(node != null){
                System.out.print(node.val + " ");
                preOrder(node.left);
                preOrder(node.right);
            }
        }
    }
    public static void main(String[] args) throws Exception {
         AVLTree tree = new AVLTree();

        tree.root = tree.insert(tree.root, 9); 
        tree.root = tree.insert(tree.root, 5); 
        tree.root = tree.insert(tree.root, 10); 
        tree.root = tree.insert(tree.root, 0); 
        tree.root = tree.insert(tree.root, 6); 
        tree.root = tree.insert(tree.root, 11); 
        tree.root = tree.insert(tree.root, -1); 
        tree.root = tree.insert(tree.root, 1); 
        tree.root = tree.insert(tree.root, 2); 
        
        System.out.println("Preorder traversal" + " of constructed tree is : ");
        
        tree.preOrder(tree.root);
    }
}
